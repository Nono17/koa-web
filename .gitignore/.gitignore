# Install node and yarn
# If you want to use npm, you can install node only, which includes npm
# Install nvm
brew install nvm

# Install different node versions
nvm install 10
nvm install 8

# Select a version to use
nvm use 10
# Create project directory
mkdir koa-http-server
cd koa-http-server

# Initialize git
git init

# Initialize package.json
yarn init

# Create .gitignore
touch .gitignore

# Create the entrypoint
touch index.js
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# IDEs
.vscode
.idea

# public
public/*
!public/favicon.ico
Intall basic packages
After that, some basic packages need to be installed.

To enable hot reload, we will use nodemon.

yarn add nodemon
Then we can add a script to package.json

"main": "index.js",
"scripts": {
    "dev": "nodemon --watch"
}

# Install test-related packages as dev dependencies
yarn add mocha chai chai-http nyc --dev

# Create a subfolder for tests
mkdir test

# Create our first test file
touch test/index.spec.js
And then the corresponding scripts:

"scripts": {
    "coverage": "nyc report --reporter=json",
    "test": "nyc mocha test/*.js"
}


# Install ESLint as a dev dependency
yarn add eslint --dev

# Interactively configure your rules
node_modules/eslint/bin/eslint.js --init
After that, we can add one more script:

"scripts": {
    "lint": "eslint *.js test/*.js --fix"
}
--fix is used so that style errors will be automatically fixed when we run yarn lint.

To enable ESLint in mocha environment, we need to modify the generated ESLint configuration file (.eslintrc.yml in my case) manually.

env:
  es6: true
  node: true
  mocha: true


# Install koa
yarn add koa
We will write the test first.

// test/index.spec.js

const chai = require('chai');
const chaiHttp = require('chai-http');
const {server} = require('../index');
const expect = chai.expect;

chai.use(chaiHttp);

describe('Basic routes', () => {
  after(() => {
    server.close();
  });

  it('should get HOME', (done) => {
    chai.request(server)
      .get('/')
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.text).equal('Hello World');
        done();
      });
  });
})

// index.js

const Koa = require('koa');
const app = new Koa();

app.use(async ctx => {
  ctx.body = 'Hello World';
});

const server = app.listen(3000);

module.exports = {
  server
};

# Create a file to save all the routes
touch router.js
Migrate existing code
We will first migrate the 'Hello World' code to router.js while not letting the test fail.

// router.js

const router = require('koa-router')();

const route = router.get('home', '/', home);

async function home(ctx) {
  ctx.body = 'Hello World';
}

module.exports = {
  route,
};
// index.js

const Koa = require('koa');
const {route} = require('./router');

const app = new Koa();

app.use(route.routes());

const server = app.listen(3000);

module.exports = {
  server
};
Now the route '/' is defined in router.js, and the test should still pass.

Add new routes
The 'POST /upload/text' route is discussed here as an example.

Test goes first.

// test/index.spec.js

// ...
it('should upload a text', (done) => {
    chai.request(server)
      .post('/upload/text')
      .set('content-type', 'application/json')
      .send({'textLayout': 'hello'})
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.text).equal('You\'ve sent the text: hello');
        done();
      });
  });

// ...
Then the implementation:

// router.js

const route = router.get('home', '/', home)
  .post('upload-text', '/upload/text', uploadText);

// ...

async function uploadText(ctx) {
  const text = ctx.request.body.textLayout;
  ctx.body = `You've sent the text: ${text}`;
}

// 
 Install koa-body
yarn add koa-body
// index.js

//

const koaBody = require('koa-body');

// 

app.use(koaBody());
app.use(route.routes());

// ...
